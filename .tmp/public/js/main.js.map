{"version":3,"sources":["main.js"],"names":["neighborhoods","restaurants","cuisines","document","addEventListener","event","fetchNeighborhoods","DBHelper","error","self","console","fillNeighborhoodsHTML","arguments","length","undefined","select","getElementById","forEach","neighborhood","createElement","option","value","fetchCuisines","fillCuisinesHTML","cuisine","innerHTML","map","google","maps","Map","zoom","center","append","lat","lng","window","scrollwheel","cSelect","updateRestaurants","cIndex","selectedIndex","nIndex","nSelect","resetRestaurants","markers","m","setMap","fillRestaurantsHTML","restaurant","ul","createRestaurantHTML","largeSourceWebp","addMarkersToMap","srcset","imageUrlForRestaurant","type","picture","largeSource","mediumSourceWebp","media","mediumSource","sourceWebp","image","src","cuisine_type","address","name","li","className","more","href","urlForRestaurant","setAttribute","mapMarkerForRestaurant","marker","url","push"],"mappings":"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","file":"main.js","sourcesContent":["let restaurants,\n  neighborhoods,\n  cuisines\nvar map\nvar markers = []\n\n/**\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\n */\ndocument.addEventListener('DOMContentLoaded', (event) => {\n  fetchNeighborhoods();\n  fetchCuisines();\n});\n\n/**\n * Fetch all neighborhoods and set their HTML.\n */\nfetchNeighborhoods = () => {\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\n    if (error) { // Got an error\n      console.error(error);\n    } else {\n      self.neighborhoods = neighborhoods;\n      fillNeighborhoodsHTML();\n    }\n  });\n}\n\n/**\n * Set neighborhoods HTML.\n */\nfillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\n  const select = document.getElementById('neighborhoods-select');\n  neighborhoods.forEach(neighborhood => {\n    const option = document.createElement('option');\n    option.innerHTML = neighborhood;\n    option.value = neighborhood;\n    select.append(option);\n  });\n}\n\n/**\n * Fetch all cuisines and set their HTML.\n */\nfetchCuisines = () => {\n  DBHelper.fetchCuisines((error, cuisines) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.cuisines = cuisines;\n      fillCuisinesHTML();\n    }\n  });\n}\n\n/**\n * Set cuisines HTML.\n */\nfillCuisinesHTML = (cuisines = self.cuisines) => {\n  const select = document.getElementById('cuisines-select');\n\n  cuisines.forEach(cuisine => {\n    const option = document.createElement('option');\n    option.innerHTML = cuisine;\n    option.value = cuisine;\n    select.append(option);\n  });\n}\n\n/**\n * Initialize Google map, called from HTML.\n */\nwindow.initMap = () => {\n  let loc = {\n    lat: 40.722216,\n    lng: -73.987501\n  };\n  self.map = new google.maps.Map(document.getElementById('map'), {\n    zoom: 12,\n    center: loc,\n    scrollwheel: false\n  });\n  updateRestaurants();\n}\n\n/**\n * Update page and map for current restaurants.\n */\nupdateRestaurants = () => {\n  const cSelect = document.getElementById('cuisines-select');\n  const nSelect = document.getElementById('neighborhoods-select');\n\n  const cIndex = cSelect.selectedIndex;\n  const nIndex = nSelect.selectedIndex;\n\n  const cuisine = cSelect[cIndex].value;\n  const neighborhood = nSelect[nIndex].value;\n\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      resetRestaurants(restaurants);\n      fillRestaurantsHTML();\n    }\n  })\n}\n\n/**\n * Clear current restaurants, their HTML and remove their map markers.\n */\nresetRestaurants = (restaurants) => {\n  // Remove all restaurants\n  self.restaurants = [];\n  const ul = document.getElementById('restaurants-list');\n  ul.innerHTML = '';\n\n  // Remove all map markers\n  self.markers.forEach(m => m.setMap(null));\n  self.markers = [];\n  self.restaurants = restaurants;\n}\n\n/**\n * Create all restaurants HTML and add them to the webpage.\n */\nfillRestaurantsHTML = (restaurants = self.restaurants) => {\n  const ul = document.getElementById('restaurants-list');\n  restaurants.forEach(restaurant => {\n    ul.append(createRestaurantHTML(restaurant));\n  });\n  addMarkersToMap();\n}\n\n/**\n * Create restaurant HTML.\n */\ncreateRestaurantHTML = (restaurant) => {\n  const li = document.createElement('li');\n\n  const picture = document.createElement('picture');\n  li.append(picture);\n\n  const largeSourceWebp = document.createElement('source');\n  largeSourceWebp.media = \"(min-width: 750px)\";\n  largeSourceWebp.srcset = DBHelper.imageUrlForRestaurant(restaurant) + '-800_large.webp';\n  largeSourceWebp.type = \"image/webp\";\n  picture.append(largeSourceWebp);\n\n  const largeSource = document.createElement('source');\n  largeSource.media = \"(min-width: 750px)\";\n  largeSource.srcset = DBHelper.imageUrlForRestaurant(restaurant) + '-800_large.jpg';\n  largeSource.type = \"image/jpeg\";\n  picture.append(largeSource);\n\n  const mediumSourceWebp = document.createElement('source');\n  mediumSourceWebp.media = \"(min-width: 500px)\";\n  mediumSourceWebp.srcset = DBHelper.imageUrlForRestaurant(restaurant) + '_medium.webp';\n  mediumSourceWebp.type = \"image/webp\";\n  picture.append(mediumSourceWebp);\n\n  const mediumSource = document.createElement('source');\n  mediumSource.media = \"(min-width: 500px)\";\n  mediumSource.srcset = DBHelper.imageUrlForRestaurant(restaurant) + '_medium.jpg';\n  mediumSource.type = \"image/jpeg\";\n  picture.append(mediumSource);\n\n  const sourceWebp = document.createElement('source');\n  sourceWebp.srcset = DBHelper.imageUrlForRestaurant(restaurant) + '.webp';\n  picture.append(sourceWebp);\n\n  const image = document.createElement('img');\n  image.className = 'restaurant-img';\n  image.src = DBHelper.imageUrlForRestaurant(restaurant) + '.jpg';\n  image.alt = restaurant.name + ' is a ' + restaurant.cuisine_type + ' restaurant in ' + restaurant.address + '.';\n  picture.append(image);\n\n  const name = document.createElement('h3');\n  name.innerHTML = restaurant.name;\n  li.append(name);\n\n  const neighborhood = document.createElement('p');\n  neighborhood.innerHTML = restaurant.neighborhood;\n  li.append(neighborhood);\n\n  const address = document.createElement('p');\n  address.innerHTML = restaurant.address;\n  li.append(address);\n\n  const more = document.createElement('a');\n  more.innerHTML = 'View Details';\n  more.setAttribute('role', 'button');\n  more.setAttribute('aria-label', restaurant.name);\n  more.href = DBHelper.urlForRestaurant(restaurant);\n  li.append(more);\n\n  return li;\n}\n\n/**\n * Add markers for current restaurants to the map.\n */\naddMarkersToMap = (restaurants = self.restaurants) => {\n  restaurants.forEach(restaurant => {\n    // Add marker to the map\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\n    google.maps.event.addListener(marker, 'click', () => {\n      window.location.href = marker.url\n    });\n    self.markers.push(marker);\n  });\n}\n"]}