let restaurants, neighborhoods, cuisines;
var map;
var markers = [];

/**
 * Fetch neighborhoods and cuisines as soon as the page is loaded.
 */
document.addEventListener('DOMContentLoaded', event => {
  fetchNeighborhoods();
  fetchCuisines();
});

/**
 * Fetch all neighborhoods and set their HTML.
 */
fetchNeighborhoods = () => {
  DBHelper.fetchNeighborhoods((error, neighborhoods) => {
    if (error) {
      // Got an error
      console.error(error);
    } else {
      self.neighborhoods = neighborhoods;
      fillNeighborhoodsHTML();
    }
  });
};

/**
 * Set neighborhoods HTML.
 */
fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {
  const select = document.getElementById('neighborhoods-select');
  neighborhoods.forEach(neighborhood => {
    const option = document.createElement('option');
    option.innerHTML = neighborhood;
    option.value = neighborhood;
    select.append(option);
  });
};

/**
 * Fetch all cuisines and set their HTML.
 */
fetchCuisines = () => {
  DBHelper.fetchCuisines((error, cuisines) => {
    if (error) {
      // Got an error!
      console.error(error);
    } else {
      self.cuisines = cuisines;
      fillCuisinesHTML();
    }
  });
};

/**
 * Set cuisines HTML.
 */
fillCuisinesHTML = (cuisines = self.cuisines) => {
  const select = document.getElementById('cuisines-select');

  cuisines.forEach(cuisine => {
    const option = document.createElement('option');
    option.innerHTML = cuisine;
    option.value = cuisine;
    select.append(option);
  });
};

/**
 * Initialize Google map, called from HTML.
 */
window.initMap = () => {
  let loc = {
    lat: 40.722216,
    lng: -73.987501
  };
  self.map = new google.maps.Map(document.getElementById('map'), {
    zoom: 12,
    center: loc,
    scrollwheel: false
  });
  updateRestaurants();
};

/**
 * Update page and map for current restaurants.
 */
updateRestaurants = () => {
  const cSelect = document.getElementById('cuisines-select');
  const nSelect = document.getElementById('neighborhoods-select');

  const cIndex = cSelect.selectedIndex;
  const nIndex = nSelect.selectedIndex;

  const cuisine = cSelect[cIndex].value;
  const neighborhood = nSelect[nIndex].value;

  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {
    if (error) {
      // Got an error!
      console.error(error);
    } else {
      resetRestaurants(restaurants);
      fillRestaurantsHTML();
    }
  });
};

/**
 * Clear current restaurants, their HTML and remove their map markers.
 */
resetRestaurants = restaurants => {
  // Remove all restaurants
  self.restaurants = [];
  const ul = document.getElementById('restaurants-list');
  ul.innerHTML = '';

  // Remove all map markers
  self.markers.forEach(m => m.setMap(null));
  self.markers = [];
  self.restaurants = restaurants;
};

/**
 * Create all restaurants HTML and add them to the webpage.
 */
fillRestaurantsHTML = (restaurants = self.restaurants) => {
  const ul = document.getElementById('restaurants-list');
  restaurants.forEach(restaurant => {
    ul.append(createRestaurantHTML(restaurant));
  });
  addMarkersToMap();
};

/**
 * Create restaurant HTML.
 */
createRestaurantHTML = restaurant => {
  const li = document.createElement('li');

  const picture = document.createElement('picture');
  li.append(picture);

  const largeSourceWebp = document.createElement('source');
  largeSourceWebp.media = "(min-width: 750px)";
  largeSourceWebp.srcset = DBHelper.imageUrlForRestaurant(restaurant) + '-800_large.webp';
  picture.append(largeSourceWebp);

  const largeSource = document.createElement('source');
  largeSource.media = "(min-width: 750px)";
  largeSource.srcset = DBHelper.imageUrlForRestaurant(restaurant) + '-800_large.jpg';
  picture.append(largeSource);

  const mediumSourceWebp = document.createElement('source');
  mediumSourceWebp.media = "(min-width: 500px)";
  mediumSourceWebp.srcset = DBHelper.imageUrlForRestaurant(restaurant) + '_medium.webp';
  picture.append(mediumSourceWebp);

  const mediumSource = document.createElement('source');
  mediumSource.media = "(min-width: 500px)";
  mediumSource.srcset = DBHelper.imageUrlForRestaurant(restaurant) + '_medium.jpg';
  picture.append(mediumSource);

  const sourceWebp = document.createElement('source');
  sourceWebp.srcset = DBHelper.imageUrlForRestaurant(restaurant) + '.webp';
  picture.append(sourceWebp);

  const image = document.createElement('img');
  image.className = 'restaurant-img';
  image.src = DBHelper.imageUrlForRestaurant(restaurant) + '.jpg';
  image.alt = restaurant.name + ' is a ' + restaurant.cuisine_type + ' restaurant in ' + restaurant.address + '.';
  picture.append(image);

  const name = document.createElement('h3');
  name.innerHTML = restaurant.name;
  li.append(name);

  const neighborhood = document.createElement('p');
  neighborhood.innerHTML = restaurant.neighborhood;
  li.append(neighborhood);

  const address = document.createElement('p');
  address.innerHTML = restaurant.address;
  li.append(address);

  const more = document.createElement('a');
  more.innerHTML = 'View Details';
  more.setAttribute('role', 'button');
  more.setAttribute('aria-label', restaurant.name);
  more.href = DBHelper.urlForRestaurant(restaurant);
  li.append(more);

  return li;
};

/**
 * Add markers for current restaurants to the map.
 */
addMarkersToMap = (restaurants = self.restaurants) => {
  restaurants.forEach(restaurant => {
    // Add marker to the map
    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);
    google.maps.event.addListener(marker, 'click', () => {
      window.location.href = marker.url;
    });
    self.markers.push(marker);
  });
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsicmVzdGF1cmFudHMiLCJuZWlnaGJvcmhvb2RzIiwiY3Vpc2luZXMiLCJtYXAiLCJtYXJrZXJzIiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJmZXRjaE5laWdoYm9yaG9vZHMiLCJmZXRjaEN1aXNpbmVzIiwiREJIZWxwZXIiLCJlcnJvciIsImNvbnNvbGUiLCJzZWxmIiwiZmlsbE5laWdoYm9yaG9vZHNIVE1MIiwic2VsZWN0IiwiZ2V0RWxlbWVudEJ5SWQiLCJmb3JFYWNoIiwibmVpZ2hib3Job29kIiwib3B0aW9uIiwiY3JlYXRlRWxlbWVudCIsImlubmVySFRNTCIsInZhbHVlIiwiYXBwZW5kIiwiZmlsbEN1aXNpbmVzSFRNTCIsImN1aXNpbmUiLCJ3aW5kb3ciLCJpbml0TWFwIiwibG9jIiwibGF0IiwibG5nIiwiZ29vZ2xlIiwibWFwcyIsIk1hcCIsInpvb20iLCJjZW50ZXIiLCJzY3JvbGx3aGVlbCIsInVwZGF0ZVJlc3RhdXJhbnRzIiwiY1NlbGVjdCIsIm5TZWxlY3QiLCJjSW5kZXgiLCJzZWxlY3RlZEluZGV4IiwibkluZGV4IiwiZmV0Y2hSZXN0YXVyYW50QnlDdWlzaW5lQW5kTmVpZ2hib3Job29kIiwicmVzZXRSZXN0YXVyYW50cyIsImZpbGxSZXN0YXVyYW50c0hUTUwiLCJ1bCIsIm0iLCJzZXRNYXAiLCJyZXN0YXVyYW50IiwiY3JlYXRlUmVzdGF1cmFudEhUTUwiLCJhZGRNYXJrZXJzVG9NYXAiLCJsaSIsInBpY3R1cmUiLCJsYXJnZVNvdXJjZVdlYnAiLCJtZWRpYSIsInNyY3NldCIsImltYWdlVXJsRm9yUmVzdGF1cmFudCIsImxhcmdlU291cmNlIiwibWVkaXVtU291cmNlV2VicCIsIm1lZGl1bVNvdXJjZSIsInNvdXJjZVdlYnAiLCJpbWFnZSIsImNsYXNzTmFtZSIsInNyYyIsImFsdCIsIm5hbWUiLCJjdWlzaW5lX3R5cGUiLCJhZGRyZXNzIiwibW9yZSIsInNldEF0dHJpYnV0ZSIsImhyZWYiLCJ1cmxGb3JSZXN0YXVyYW50IiwibWFya2VyIiwibWFwTWFya2VyRm9yUmVzdGF1cmFudCIsImFkZExpc3RlbmVyIiwibG9jYXRpb24iLCJ1cmwiLCJwdXNoIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxXQUFKLEVBQ0VDLGFBREYsRUFFRUMsUUFGRjtBQUdBLElBQUlDLEdBQUo7QUFDQSxJQUFJQyxVQUFVLEVBQWQ7O0FBRUE7OztBQUdBQyxTQUFTQyxnQkFBVCxDQUEwQixrQkFBMUIsRUFBK0NDLEtBQUQsSUFBVztBQUN2REM7QUFDQUM7QUFDRCxDQUhEOztBQUtBOzs7QUFHQUQscUJBQXFCLE1BQU07QUFDekJFLFdBQVNGLGtCQUFULENBQTRCLENBQUNHLEtBQUQsRUFBUVYsYUFBUixLQUEwQjtBQUNwRCxRQUFJVSxLQUFKLEVBQVc7QUFBRTtBQUNYQyxjQUFRRCxLQUFSLENBQWNBLEtBQWQ7QUFDRCxLQUZELE1BRU87QUFDTEUsV0FBS1osYUFBTCxHQUFxQkEsYUFBckI7QUFDQWE7QUFDRDtBQUNGLEdBUEQ7QUFRRCxDQVREOztBQVdBOzs7QUFHQUEsd0JBQXdCLENBQUNiLGdCQUFnQlksS0FBS1osYUFBdEIsS0FBd0M7QUFDOUQsUUFBTWMsU0FBU1YsU0FBU1csY0FBVCxDQUF3QixzQkFBeEIsQ0FBZjtBQUNBZixnQkFBY2dCLE9BQWQsQ0FBc0JDLGdCQUFnQjtBQUNwQyxVQUFNQyxTQUFTZCxTQUFTZSxhQUFULENBQXVCLFFBQXZCLENBQWY7QUFDQUQsV0FBT0UsU0FBUCxHQUFtQkgsWUFBbkI7QUFDQUMsV0FBT0csS0FBUCxHQUFlSixZQUFmO0FBQ0FILFdBQU9RLE1BQVAsQ0FBY0osTUFBZDtBQUNELEdBTEQ7QUFNRCxDQVJEOztBQVVBOzs7QUFHQVYsZ0JBQWdCLE1BQU07QUFDcEJDLFdBQVNELGFBQVQsQ0FBdUIsQ0FBQ0UsS0FBRCxFQUFRVCxRQUFSLEtBQXFCO0FBQzFDLFFBQUlTLEtBQUosRUFBVztBQUFFO0FBQ1hDLGNBQVFELEtBQVIsQ0FBY0EsS0FBZDtBQUNELEtBRkQsTUFFTztBQUNMRSxXQUFLWCxRQUFMLEdBQWdCQSxRQUFoQjtBQUNBc0I7QUFDRDtBQUNGLEdBUEQ7QUFRRCxDQVREOztBQVdBOzs7QUFHQUEsbUJBQW1CLENBQUN0QixXQUFXVyxLQUFLWCxRQUFqQixLQUE4QjtBQUMvQyxRQUFNYSxTQUFTVixTQUFTVyxjQUFULENBQXdCLGlCQUF4QixDQUFmOztBQUVBZCxXQUFTZSxPQUFULENBQWlCUSxXQUFXO0FBQzFCLFVBQU1OLFNBQVNkLFNBQVNlLGFBQVQsQ0FBdUIsUUFBdkIsQ0FBZjtBQUNBRCxXQUFPRSxTQUFQLEdBQW1CSSxPQUFuQjtBQUNBTixXQUFPRyxLQUFQLEdBQWVHLE9BQWY7QUFDQVYsV0FBT1EsTUFBUCxDQUFjSixNQUFkO0FBQ0QsR0FMRDtBQU1ELENBVEQ7O0FBV0E7OztBQUdBTyxPQUFPQyxPQUFQLEdBQWlCLE1BQU07QUFDckIsTUFBSUMsTUFBTTtBQUNSQyxTQUFLLFNBREc7QUFFUkMsU0FBSyxDQUFDO0FBRkUsR0FBVjtBQUlBakIsT0FBS1YsR0FBTCxHQUFXLElBQUk0QixPQUFPQyxJQUFQLENBQVlDLEdBQWhCLENBQW9CNUIsU0FBU1csY0FBVCxDQUF3QixLQUF4QixDQUFwQixFQUFvRDtBQUM3RGtCLFVBQU0sRUFEdUQ7QUFFN0RDLFlBQVFQLEdBRnFEO0FBRzdEUSxpQkFBYTtBQUhnRCxHQUFwRCxDQUFYO0FBS0FDO0FBQ0QsQ0FYRDs7QUFhQTs7O0FBR0FBLG9CQUFvQixNQUFNO0FBQ3hCLFFBQU1DLFVBQVVqQyxTQUFTVyxjQUFULENBQXdCLGlCQUF4QixDQUFoQjtBQUNBLFFBQU11QixVQUFVbEMsU0FBU1csY0FBVCxDQUF3QixzQkFBeEIsQ0FBaEI7O0FBRUEsUUFBTXdCLFNBQVNGLFFBQVFHLGFBQXZCO0FBQ0EsUUFBTUMsU0FBU0gsUUFBUUUsYUFBdkI7O0FBRUEsUUFBTWhCLFVBQVVhLFFBQVFFLE1BQVIsRUFBZ0JsQixLQUFoQztBQUNBLFFBQU1KLGVBQWVxQixRQUFRRyxNQUFSLEVBQWdCcEIsS0FBckM7O0FBRUFaLFdBQVNpQyx1Q0FBVCxDQUFpRGxCLE9BQWpELEVBQTBEUCxZQUExRCxFQUF3RSxDQUFDUCxLQUFELEVBQVFYLFdBQVIsS0FBd0I7QUFDOUYsUUFBSVcsS0FBSixFQUFXO0FBQUU7QUFDWEMsY0FBUUQsS0FBUixDQUFjQSxLQUFkO0FBQ0QsS0FGRCxNQUVPO0FBQ0xpQyx1QkFBaUI1QyxXQUFqQjtBQUNBNkM7QUFDRDtBQUNGLEdBUEQ7QUFRRCxDQWxCRDs7QUFvQkE7OztBQUdBRCxtQkFBb0I1QyxXQUFELElBQWlCO0FBQ2xDO0FBQ0FhLE9BQUtiLFdBQUwsR0FBbUIsRUFBbkI7QUFDQSxRQUFNOEMsS0FBS3pDLFNBQVNXLGNBQVQsQ0FBd0Isa0JBQXhCLENBQVg7QUFDQThCLEtBQUd6QixTQUFILEdBQWUsRUFBZjs7QUFFQTtBQUNBUixPQUFLVCxPQUFMLENBQWFhLE9BQWIsQ0FBcUI4QixLQUFLQSxFQUFFQyxNQUFGLENBQVMsSUFBVCxDQUExQjtBQUNBbkMsT0FBS1QsT0FBTCxHQUFlLEVBQWY7QUFDQVMsT0FBS2IsV0FBTCxHQUFtQkEsV0FBbkI7QUFDRCxDQVZEOztBQVlBOzs7QUFHQTZDLHNCQUFzQixDQUFDN0MsY0FBY2EsS0FBS2IsV0FBcEIsS0FBb0M7QUFDeEQsUUFBTThDLEtBQUt6QyxTQUFTVyxjQUFULENBQXdCLGtCQUF4QixDQUFYO0FBQ0FoQixjQUFZaUIsT0FBWixDQUFvQmdDLGNBQWM7QUFDaENILE9BQUd2QixNQUFILENBQVUyQixxQkFBcUJELFVBQXJCLENBQVY7QUFDRCxHQUZEO0FBR0FFO0FBQ0QsQ0FORDs7QUFRQTs7O0FBR0FELHVCQUF3QkQsVUFBRCxJQUFnQjtBQUNyQyxRQUFNRyxLQUFLL0MsU0FBU2UsYUFBVCxDQUF1QixJQUF2QixDQUFYOztBQUVBLFFBQU1pQyxVQUFVaEQsU0FBU2UsYUFBVCxDQUF1QixTQUF2QixDQUFoQjtBQUNBZ0MsS0FBRzdCLE1BQUgsQ0FBVThCLE9BQVY7O0FBRUEsUUFBTUMsa0JBQWtCakQsU0FBU2UsYUFBVCxDQUF1QixRQUF2QixDQUF4QjtBQUNBa0Msa0JBQWdCQyxLQUFoQixHQUF3QixvQkFBeEI7QUFDQUQsa0JBQWdCRSxNQUFoQixHQUF5QjlDLFNBQVMrQyxxQkFBVCxDQUErQlIsVUFBL0IsSUFBNkMsaUJBQXRFO0FBQ0FJLFVBQVE5QixNQUFSLENBQWUrQixlQUFmOztBQUVBLFFBQU1JLGNBQWNyRCxTQUFTZSxhQUFULENBQXVCLFFBQXZCLENBQXBCO0FBQ0FzQyxjQUFZSCxLQUFaLEdBQW9CLG9CQUFwQjtBQUNBRyxjQUFZRixNQUFaLEdBQXFCOUMsU0FBUytDLHFCQUFULENBQStCUixVQUEvQixJQUE2QyxnQkFBbEU7QUFDQUksVUFBUTlCLE1BQVIsQ0FBZW1DLFdBQWY7O0FBRUEsUUFBTUMsbUJBQW1CdEQsU0FBU2UsYUFBVCxDQUF1QixRQUF2QixDQUF6QjtBQUNBdUMsbUJBQWlCSixLQUFqQixHQUF5QixvQkFBekI7QUFDQUksbUJBQWlCSCxNQUFqQixHQUEwQjlDLFNBQVMrQyxxQkFBVCxDQUErQlIsVUFBL0IsSUFBNkMsY0FBdkU7QUFDQUksVUFBUTlCLE1BQVIsQ0FBZW9DLGdCQUFmOztBQUVBLFFBQU1DLGVBQWV2RCxTQUFTZSxhQUFULENBQXVCLFFBQXZCLENBQXJCO0FBQ0F3QyxlQUFhTCxLQUFiLEdBQXFCLG9CQUFyQjtBQUNBSyxlQUFhSixNQUFiLEdBQXNCOUMsU0FBUytDLHFCQUFULENBQStCUixVQUEvQixJQUE2QyxhQUFuRTtBQUNBSSxVQUFROUIsTUFBUixDQUFlcUMsWUFBZjs7QUFFQSxRQUFNQyxhQUFheEQsU0FBU2UsYUFBVCxDQUF1QixRQUF2QixDQUFuQjtBQUNBeUMsYUFBV0wsTUFBWCxHQUFvQjlDLFNBQVMrQyxxQkFBVCxDQUErQlIsVUFBL0IsSUFBNkMsT0FBakU7QUFDQUksVUFBUTlCLE1BQVIsQ0FBZXNDLFVBQWY7O0FBRUEsUUFBTUMsUUFBUXpELFNBQVNlLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBZDtBQUNBMEMsUUFBTUMsU0FBTixHQUFrQixnQkFBbEI7QUFDQUQsUUFBTUUsR0FBTixHQUFZdEQsU0FBUytDLHFCQUFULENBQStCUixVQUEvQixJQUE2QyxNQUF6RDtBQUNBYSxRQUFNRyxHQUFOLEdBQVloQixXQUFXaUIsSUFBWCxHQUFrQixRQUFsQixHQUE2QmpCLFdBQVdrQixZQUF4QyxHQUF1RCxpQkFBdkQsR0FBMkVsQixXQUFXbUIsT0FBdEYsR0FBZ0csR0FBNUc7QUFDQWYsVUFBUTlCLE1BQVIsQ0FBZXVDLEtBQWY7O0FBRUEsUUFBTUksT0FBTzdELFNBQVNlLGFBQVQsQ0FBdUIsSUFBdkIsQ0FBYjtBQUNBOEMsT0FBSzdDLFNBQUwsR0FBaUI0QixXQUFXaUIsSUFBNUI7QUFDQWQsS0FBRzdCLE1BQUgsQ0FBVTJDLElBQVY7O0FBRUEsUUFBTWhELGVBQWViLFNBQVNlLGFBQVQsQ0FBdUIsR0FBdkIsQ0FBckI7QUFDQUYsZUFBYUcsU0FBYixHQUF5QjRCLFdBQVcvQixZQUFwQztBQUNBa0MsS0FBRzdCLE1BQUgsQ0FBVUwsWUFBVjs7QUFFQSxRQUFNa0QsVUFBVS9ELFNBQVNlLGFBQVQsQ0FBdUIsR0FBdkIsQ0FBaEI7QUFDQWdELFVBQVEvQyxTQUFSLEdBQW9CNEIsV0FBV21CLE9BQS9CO0FBQ0FoQixLQUFHN0IsTUFBSCxDQUFVNkMsT0FBVjs7QUFFQSxRQUFNQyxPQUFPaEUsU0FBU2UsYUFBVCxDQUF1QixHQUF2QixDQUFiO0FBQ0FpRCxPQUFLaEQsU0FBTCxHQUFpQixjQUFqQjtBQUNBZ0QsT0FBS0MsWUFBTCxDQUFrQixNQUFsQixFQUEwQixRQUExQjtBQUNBRCxPQUFLQyxZQUFMLENBQWtCLFlBQWxCLEVBQWdDckIsV0FBV2lCLElBQTNDO0FBQ0FHLE9BQUtFLElBQUwsR0FBWTdELFNBQVM4RCxnQkFBVCxDQUEwQnZCLFVBQTFCLENBQVo7QUFDQUcsS0FBRzdCLE1BQUgsQ0FBVThDLElBQVY7O0FBRUEsU0FBT2pCLEVBQVA7QUFDRCxDQXhERDs7QUEwREE7OztBQUdBRCxrQkFBa0IsQ0FBQ25ELGNBQWNhLEtBQUtiLFdBQXBCLEtBQW9DO0FBQ3BEQSxjQUFZaUIsT0FBWixDQUFvQmdDLGNBQWM7QUFDaEM7QUFDQSxVQUFNd0IsU0FBUy9ELFNBQVNnRSxzQkFBVCxDQUFnQ3pCLFVBQWhDLEVBQTRDcEMsS0FBS1YsR0FBakQsQ0FBZjtBQUNBNEIsV0FBT0MsSUFBUCxDQUFZekIsS0FBWixDQUFrQm9FLFdBQWxCLENBQThCRixNQUE5QixFQUFzQyxPQUF0QyxFQUErQyxNQUFNO0FBQ25EL0MsYUFBT2tELFFBQVAsQ0FBZ0JMLElBQWhCLEdBQXVCRSxPQUFPSSxHQUE5QjtBQUNELEtBRkQ7QUFHQWhFLFNBQUtULE9BQUwsQ0FBYTBFLElBQWIsQ0FBa0JMLE1BQWxCO0FBQ0QsR0FQRDtBQVFELENBVEQiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImxldCByZXN0YXVyYW50cyxcbiAgbmVpZ2hib3Job29kcyxcbiAgY3Vpc2luZXNcbnZhciBtYXBcbnZhciBtYXJrZXJzID0gW11cblxuLyoqXG4gKiBGZXRjaCBuZWlnaGJvcmhvb2RzIGFuZCBjdWlzaW5lcyBhcyBzb29uIGFzIHRoZSBwYWdlIGlzIGxvYWRlZC5cbiAqL1xuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIChldmVudCkgPT4ge1xuICBmZXRjaE5laWdoYm9yaG9vZHMoKTtcbiAgZmV0Y2hDdWlzaW5lcygpO1xufSk7XG5cbi8qKlxuICogRmV0Y2ggYWxsIG5laWdoYm9yaG9vZHMgYW5kIHNldCB0aGVpciBIVE1MLlxuICovXG5mZXRjaE5laWdoYm9yaG9vZHMgPSAoKSA9PiB7XG4gIERCSGVscGVyLmZldGNoTmVpZ2hib3Job29kcygoZXJyb3IsIG5laWdoYm9yaG9vZHMpID0+IHtcbiAgICBpZiAoZXJyb3IpIHsgLy8gR290IGFuIGVycm9yXG4gICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZi5uZWlnaGJvcmhvb2RzID0gbmVpZ2hib3Job29kcztcbiAgICAgIGZpbGxOZWlnaGJvcmhvb2RzSFRNTCgpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogU2V0IG5laWdoYm9yaG9vZHMgSFRNTC5cbiAqL1xuZmlsbE5laWdoYm9yaG9vZHNIVE1MID0gKG5laWdoYm9yaG9vZHMgPSBzZWxmLm5laWdoYm9yaG9vZHMpID0+IHtcbiAgY29uc3Qgc2VsZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25laWdoYm9yaG9vZHMtc2VsZWN0Jyk7XG4gIG5laWdoYm9yaG9vZHMuZm9yRWFjaChuZWlnaGJvcmhvb2QgPT4ge1xuICAgIGNvbnN0IG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xuICAgIG9wdGlvbi5pbm5lckhUTUwgPSBuZWlnaGJvcmhvb2Q7XG4gICAgb3B0aW9uLnZhbHVlID0gbmVpZ2hib3Job29kO1xuICAgIHNlbGVjdC5hcHBlbmQob3B0aW9uKTtcbiAgfSk7XG59XG5cbi8qKlxuICogRmV0Y2ggYWxsIGN1aXNpbmVzIGFuZCBzZXQgdGhlaXIgSFRNTC5cbiAqL1xuZmV0Y2hDdWlzaW5lcyA9ICgpID0+IHtcbiAgREJIZWxwZXIuZmV0Y2hDdWlzaW5lcygoZXJyb3IsIGN1aXNpbmVzKSA9PiB7XG4gICAgaWYgKGVycm9yKSB7IC8vIEdvdCBhbiBlcnJvciFcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxmLmN1aXNpbmVzID0gY3Vpc2luZXM7XG4gICAgICBmaWxsQ3Vpc2luZXNIVE1MKCk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBTZXQgY3Vpc2luZXMgSFRNTC5cbiAqL1xuZmlsbEN1aXNpbmVzSFRNTCA9IChjdWlzaW5lcyA9IHNlbGYuY3Vpc2luZXMpID0+IHtcbiAgY29uc3Qgc2VsZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2N1aXNpbmVzLXNlbGVjdCcpO1xuXG4gIGN1aXNpbmVzLmZvckVhY2goY3Vpc2luZSA9PiB7XG4gICAgY29uc3Qgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gICAgb3B0aW9uLmlubmVySFRNTCA9IGN1aXNpbmU7XG4gICAgb3B0aW9uLnZhbHVlID0gY3Vpc2luZTtcbiAgICBzZWxlY3QuYXBwZW5kKG9wdGlvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIEluaXRpYWxpemUgR29vZ2xlIG1hcCwgY2FsbGVkIGZyb20gSFRNTC5cbiAqL1xud2luZG93LmluaXRNYXAgPSAoKSA9PiB7XG4gIGxldCBsb2MgPSB7XG4gICAgbGF0OiA0MC43MjIyMTYsXG4gICAgbG5nOiAtNzMuOTg3NTAxXG4gIH07XG4gIHNlbGYubWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFwJyksIHtcbiAgICB6b29tOiAxMixcbiAgICBjZW50ZXI6IGxvYyxcbiAgICBzY3JvbGx3aGVlbDogZmFsc2VcbiAgfSk7XG4gIHVwZGF0ZVJlc3RhdXJhbnRzKCk7XG59XG5cbi8qKlxuICogVXBkYXRlIHBhZ2UgYW5kIG1hcCBmb3IgY3VycmVudCByZXN0YXVyYW50cy5cbiAqL1xudXBkYXRlUmVzdGF1cmFudHMgPSAoKSA9PiB7XG4gIGNvbnN0IGNTZWxlY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY3Vpc2luZXMtc2VsZWN0Jyk7XG4gIGNvbnN0IG5TZWxlY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmVpZ2hib3Job29kcy1zZWxlY3QnKTtcblxuICBjb25zdCBjSW5kZXggPSBjU2VsZWN0LnNlbGVjdGVkSW5kZXg7XG4gIGNvbnN0IG5JbmRleCA9IG5TZWxlY3Quc2VsZWN0ZWRJbmRleDtcblxuICBjb25zdCBjdWlzaW5lID0gY1NlbGVjdFtjSW5kZXhdLnZhbHVlO1xuICBjb25zdCBuZWlnaGJvcmhvb2QgPSBuU2VsZWN0W25JbmRleF0udmFsdWU7XG5cbiAgREJIZWxwZXIuZmV0Y2hSZXN0YXVyYW50QnlDdWlzaW5lQW5kTmVpZ2hib3Job29kKGN1aXNpbmUsIG5laWdoYm9yaG9vZCwgKGVycm9yLCByZXN0YXVyYW50cykgPT4ge1xuICAgIGlmIChlcnJvcikgeyAvLyBHb3QgYW4gZXJyb3IhXG4gICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzZXRSZXN0YXVyYW50cyhyZXN0YXVyYW50cyk7XG4gICAgICBmaWxsUmVzdGF1cmFudHNIVE1MKCk7XG4gICAgfVxuICB9KVxufVxuXG4vKipcbiAqIENsZWFyIGN1cnJlbnQgcmVzdGF1cmFudHMsIHRoZWlyIEhUTUwgYW5kIHJlbW92ZSB0aGVpciBtYXAgbWFya2Vycy5cbiAqL1xucmVzZXRSZXN0YXVyYW50cyA9IChyZXN0YXVyYW50cykgPT4ge1xuICAvLyBSZW1vdmUgYWxsIHJlc3RhdXJhbnRzXG4gIHNlbGYucmVzdGF1cmFudHMgPSBbXTtcbiAgY29uc3QgdWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVzdGF1cmFudHMtbGlzdCcpO1xuICB1bC5pbm5lckhUTUwgPSAnJztcblxuICAvLyBSZW1vdmUgYWxsIG1hcCBtYXJrZXJzXG4gIHNlbGYubWFya2Vycy5mb3JFYWNoKG0gPT4gbS5zZXRNYXAobnVsbCkpO1xuICBzZWxmLm1hcmtlcnMgPSBbXTtcbiAgc2VsZi5yZXN0YXVyYW50cyA9IHJlc3RhdXJhbnRzO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhbGwgcmVzdGF1cmFudHMgSFRNTCBhbmQgYWRkIHRoZW0gdG8gdGhlIHdlYnBhZ2UuXG4gKi9cbmZpbGxSZXN0YXVyYW50c0hUTUwgPSAocmVzdGF1cmFudHMgPSBzZWxmLnJlc3RhdXJhbnRzKSA9PiB7XG4gIGNvbnN0IHVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc3RhdXJhbnRzLWxpc3QnKTtcbiAgcmVzdGF1cmFudHMuZm9yRWFjaChyZXN0YXVyYW50ID0+IHtcbiAgICB1bC5hcHBlbmQoY3JlYXRlUmVzdGF1cmFudEhUTUwocmVzdGF1cmFudCkpO1xuICB9KTtcbiAgYWRkTWFya2Vyc1RvTWFwKCk7XG59XG5cbi8qKlxuICogQ3JlYXRlIHJlc3RhdXJhbnQgSFRNTC5cbiAqL1xuY3JlYXRlUmVzdGF1cmFudEhUTUwgPSAocmVzdGF1cmFudCkgPT4ge1xuICBjb25zdCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG5cbiAgY29uc3QgcGljdHVyZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3BpY3R1cmUnKTtcbiAgbGkuYXBwZW5kKHBpY3R1cmUpO1xuXG4gIGNvbnN0IGxhcmdlU291cmNlV2VicCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NvdXJjZScpO1xuICBsYXJnZVNvdXJjZVdlYnAubWVkaWEgPSBcIihtaW4td2lkdGg6IDc1MHB4KVwiO1xuICBsYXJnZVNvdXJjZVdlYnAuc3Jjc2V0ID0gREJIZWxwZXIuaW1hZ2VVcmxGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQpICsgJy04MDBfbGFyZ2Uud2VicCc7XG4gIHBpY3R1cmUuYXBwZW5kKGxhcmdlU291cmNlV2VicCk7XG5cbiAgY29uc3QgbGFyZ2VTb3VyY2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzb3VyY2UnKTtcbiAgbGFyZ2VTb3VyY2UubWVkaWEgPSBcIihtaW4td2lkdGg6IDc1MHB4KVwiO1xuICBsYXJnZVNvdXJjZS5zcmNzZXQgPSBEQkhlbHBlci5pbWFnZVVybEZvclJlc3RhdXJhbnQocmVzdGF1cmFudCkgKyAnLTgwMF9sYXJnZS5qcGcnO1xuICBwaWN0dXJlLmFwcGVuZChsYXJnZVNvdXJjZSk7XG5cbiAgY29uc3QgbWVkaXVtU291cmNlV2VicCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NvdXJjZScpO1xuICBtZWRpdW1Tb3VyY2VXZWJwLm1lZGlhID0gXCIobWluLXdpZHRoOiA1MDBweClcIjtcbiAgbWVkaXVtU291cmNlV2VicC5zcmNzZXQgPSBEQkhlbHBlci5pbWFnZVVybEZvclJlc3RhdXJhbnQocmVzdGF1cmFudCkgKyAnX21lZGl1bS53ZWJwJztcbiAgcGljdHVyZS5hcHBlbmQobWVkaXVtU291cmNlV2VicCk7XG5cbiAgY29uc3QgbWVkaXVtU291cmNlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc291cmNlJyk7XG4gIG1lZGl1bVNvdXJjZS5tZWRpYSA9IFwiKG1pbi13aWR0aDogNTAwcHgpXCI7XG4gIG1lZGl1bVNvdXJjZS5zcmNzZXQgPSBEQkhlbHBlci5pbWFnZVVybEZvclJlc3RhdXJhbnQocmVzdGF1cmFudCkgKyAnX21lZGl1bS5qcGcnO1xuICBwaWN0dXJlLmFwcGVuZChtZWRpdW1Tb3VyY2UpO1xuXG4gIGNvbnN0IHNvdXJjZVdlYnAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzb3VyY2UnKTtcbiAgc291cmNlV2VicC5zcmNzZXQgPSBEQkhlbHBlci5pbWFnZVVybEZvclJlc3RhdXJhbnQocmVzdGF1cmFudCkgKyAnLndlYnAnO1xuICBwaWN0dXJlLmFwcGVuZChzb3VyY2VXZWJwKTtcblxuICBjb25zdCBpbWFnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuICBpbWFnZS5jbGFzc05hbWUgPSAncmVzdGF1cmFudC1pbWcnO1xuICBpbWFnZS5zcmMgPSBEQkhlbHBlci5pbWFnZVVybEZvclJlc3RhdXJhbnQocmVzdGF1cmFudCkgKyAnLmpwZyc7XG4gIGltYWdlLmFsdCA9IHJlc3RhdXJhbnQubmFtZSArICcgaXMgYSAnICsgcmVzdGF1cmFudC5jdWlzaW5lX3R5cGUgKyAnIHJlc3RhdXJhbnQgaW4gJyArIHJlc3RhdXJhbnQuYWRkcmVzcyArICcuJztcbiAgcGljdHVyZS5hcHBlbmQoaW1hZ2UpO1xuXG4gIGNvbnN0IG5hbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMycpO1xuICBuYW1lLmlubmVySFRNTCA9IHJlc3RhdXJhbnQubmFtZTtcbiAgbGkuYXBwZW5kKG5hbWUpO1xuXG4gIGNvbnN0IG5laWdoYm9yaG9vZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgbmVpZ2hib3Job29kLmlubmVySFRNTCA9IHJlc3RhdXJhbnQubmVpZ2hib3Job29kO1xuICBsaS5hcHBlbmQobmVpZ2hib3Job29kKTtcblxuICBjb25zdCBhZGRyZXNzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICBhZGRyZXNzLmlubmVySFRNTCA9IHJlc3RhdXJhbnQuYWRkcmVzcztcbiAgbGkuYXBwZW5kKGFkZHJlc3MpO1xuXG4gIGNvbnN0IG1vcmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gIG1vcmUuaW5uZXJIVE1MID0gJ1ZpZXcgRGV0YWlscyc7XG4gIG1vcmUuc2V0QXR0cmlidXRlKCdyb2xlJywgJ2J1dHRvbicpO1xuICBtb3JlLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsIHJlc3RhdXJhbnQubmFtZSk7XG4gIG1vcmUuaHJlZiA9IERCSGVscGVyLnVybEZvclJlc3RhdXJhbnQocmVzdGF1cmFudCk7XG4gIGxpLmFwcGVuZChtb3JlKTtcblxuICByZXR1cm4gbGk7XG59XG5cbi8qKlxuICogQWRkIG1hcmtlcnMgZm9yIGN1cnJlbnQgcmVzdGF1cmFudHMgdG8gdGhlIG1hcC5cbiAqL1xuYWRkTWFya2Vyc1RvTWFwID0gKHJlc3RhdXJhbnRzID0gc2VsZi5yZXN0YXVyYW50cykgPT4ge1xuICByZXN0YXVyYW50cy5mb3JFYWNoKHJlc3RhdXJhbnQgPT4ge1xuICAgIC8vIEFkZCBtYXJrZXIgdG8gdGhlIG1hcFxuICAgIGNvbnN0IG1hcmtlciA9IERCSGVscGVyLm1hcE1hcmtlckZvclJlc3RhdXJhbnQocmVzdGF1cmFudCwgc2VsZi5tYXApO1xuICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKG1hcmtlciwgJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBtYXJrZXIudXJsXG4gICAgfSk7XG4gICAgc2VsZi5tYXJrZXJzLnB1c2gobWFya2VyKTtcbiAgfSk7XG59XG4iXX0=
