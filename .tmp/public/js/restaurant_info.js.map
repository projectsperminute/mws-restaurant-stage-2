{"version":3,"sources":["restaurant_info.js"],"names":["map","restaurant","window","initMap","fetchRestaurantFromURL","error","self","google","maps","Map","document","getElementById","console","center","latlng","scrollwheel","callback","id","getParameterByName","DBHelper","fetchRestaurantById","fillRestaurantHTML","arguments","length","undefined","innerHTML","name","address","largeSource","largeSrcset","mediumSource","mediumSrcset","imageUrlForRestaurant","srcset","image","className","cuisine_type","cuisine","fillRestaurantHoursHTML","operatingHours","operating_hours","fillReviewsHTML","key","row","createElement","day","time","hours","appendChild","reviews","container","title","noReviews","createReviewHTML","review","ul","forEach","li","date","rating","comments","fillBreadcrumb","breadcrumb","url","location","href","exec","results","decodeURIComponent","replace"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["let restaurant;\nvar map;\n\n/**\n * Initialize Google map, called from HTML.\n */\nwindow.initMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 16,\n        center: restaurant.latlng,\n        scrollwheel: false\n      });\n      fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n    }\n  });\n}\n\n/**\n * Get current restaurant from page URL.\n */\nfetchRestaurantFromURL = (callback) => {\n  if (self.restaurant) { // restaurant already fetched!\n    callback(null, self.restaurant)\n    return;\n  }\n  const id = getParameterByName('id');\n  if (!id) { // no id found in URL\n    error = 'No restaurant id in URL'\n    callback(error, null);\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      self.restaurant = restaurant;\n      if (!restaurant) {\n        console.error(error);\n        return;\n      }\n      fillRestaurantHTML();\n      callback(null, restaurant)\n    });\n  }\n}\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nfillRestaurantHTML = (restaurant = self.restaurant) => {\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML = restaurant.address;\n\n  const largeSource = document.getElementById('restaurant-source-large');\n  let largeSrcset = DBHelper.imageUrlForRestaurant(restaurant);\n  largeSrcset = largeSrcset.replace(/.jpg/i, '');\n  largeSrcset = largeSrcset + '-1600_large.jpg 2x, ' + largeSrcset +'-800_large.jpg';\n  largeSource.srcset = largeSrcset;\n\n  const mediumSource = document.getElementById('restaurant-source-medium');\n  let mediumSrcset = DBHelper.imageUrlForRestaurant(restaurant);\n  mediumSrcset = mediumSrcset.replace(/.jpg/i, '_medium.jpg');\n  mediumSource.srcset = mediumSrcset;\n\n  const image = document.getElementById('restaurant-img');\n  image.className = 'restaurant-img'\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\n  image.alt = restaurant.name + ' is a ' + restaurant.cuisine_type + ' restaurant in ' + restaurant.address + '.';\n\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = restaurant.cuisine_type;\n\n  // fill operating hours\n  if (restaurant.operating_hours) {\n    fillRestaurantHoursHTML();\n  }\n  // fill reviews\n  fillReviewsHTML();\n}\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nfillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n  const hours = document.getElementById('restaurant-hours');\n  for (let key in operatingHours) {\n    const row = document.createElement('tr');\n\n    const day = document.createElement('td');\n    day.innerHTML = key;\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n}\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nfillReviewsHTML = (reviews = self.restaurant.reviews) => {\n  const container = document.getElementById('reviews-container');\n  const title = document.createElement('h3');\n  title.innerHTML = 'Reviews';\n  container.appendChild(title);\n\n  if (!reviews) {\n    const noReviews = document.createElement('p');\n    noReviews.innerHTML = 'No reviews yet!';\n    container.appendChild(noReviews);\n    return;\n  }\n  const ul = document.getElementById('reviews-list');\n  reviews.forEach(review => {\n    ul.appendChild(createReviewHTML(review));\n  });\n  container.appendChild(ul);\n}\n\n/**\n * Create review HTML and add it to the webpage.\n */\ncreateReviewHTML = (review) => {\n  const li = document.createElement('li');\n  const name = document.createElement('p');\n  name.innerHTML = review.name;\n  li.appendChild(name);\n\n  const date = document.createElement('p');\n  date.innerHTML = review.date;\n  li.appendChild(date);\n\n  const rating = document.createElement('p');\n  rating.innerHTML = `Rating: ${review.rating}`;\n  li.appendChild(rating);\n\n  const comments = document.createElement('p');\n  comments.innerHTML = review.comments;\n  li.appendChild(comments);\n\n  return li;\n}\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nfillBreadcrumb = (restaurant=self.restaurant) => {\n  const breadcrumb = document.getElementById('breadcrumb');\n  const li = document.createElement('li');\n  li.setAttribute('aria-current', 'page');\n  li.innerHTML = restaurant.name;\n  breadcrumb.appendChild(li);\n}\n\n/**\n * Get a parameter by name from page URL.\n */\ngetParameterByName = (name, url) => {\n  if (!url)\n    url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results)\n    return null;\n  if (!results[2])\n    return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n"]}